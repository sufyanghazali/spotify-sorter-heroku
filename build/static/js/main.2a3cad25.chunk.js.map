{"version":3,"sources":["components/Song.js","components/SortButton.js","components/SaveButton.js","utils/sort.js","components/Playlist.js","hooks/useViewport.js","components/MobilePlaylistItem.js","components/DesktopPlaylistItem.js","components/PlaylistItem.js","components/Playlists.js","components/Dashboard.js","components/Login.js","components/App.js","index.js"],"names":["Song","song","className","src","track","album","images","url","alt","name","artists","SortButton","onClick","SaveButton","sorted","disabled","compareAlbumSongs","a","b","posA","track_number","posB","result","compareAlbumDates","dateA","dateB","Date","parse","release_date","Playlist","playlist","access_token","onExit","useState","setSorted","songs","setSongs","useEffect","axios","get","tracks","href","headers","Authorization","response","data","items","length","total","params","offset","limit","then","res","getPlaylistSongs","listItems","map","index","id","onSave","uris","uri","put","slice","counter","post","catch","error","console","log","status","request","message","config","role","focusable","height","width","viewBox","points","fill","stroke","owner","display_name","sortedAlbums","groupedAlbums","reduce","r","sortedAlbum","sort","sortedSongs","useViewport","window","innerWidth","setWidth","handleWindowResize","addEventListener","removeEventListener","MobilePlaylistItem","onPlaylistSelect","selectedPlaylist","DesktopPlaylistItem","PlaylistItem","Playlists","playlists","list","Dashboard","setPlaylists","showPlaylist","setShowPlaylist","setSelectedPlaylist","getUserPlaylists","setTimeout","Login","URLSearchParams","location","search","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a3cad25.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Song({ song }) {\r\n    return (\r\n        <div className=\"song\">\r\n            <img className=\"song-image\" src={song.track.album.images[2].url} alt=\"song\" />\r\n            <div className=\"song-info\">\r\n                <div className=\"song-title\">{song.track.name}</div>\r\n                <div className=\"song-artist\">{song.track.artists[0].name}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Song;","import React from 'react';\r\n\r\nfunction SortButton({ onClick }) {\r\n    return (\r\n        <button onClick={() => onClick()}>\r\n            Sort\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SortButton;","import React from 'react';\r\n\r\nfunction SaveButton({ onClick, sorted }) {\r\n    return (\r\n        // <button className=\"ui button\" onClick={() => onClick()} disabled={sorted}>Save</button>\r\n        <button onClick={() => onClick()} disabled={!sorted}>\r\n            Save\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SaveButton;","export const partition = function(arr, leftIdx, rightIdx, pivotIdx) {\r\n    let pivotVal, currIdx, newPivotIdx;\r\n\r\n    pivotVal = arr[pivotIdx];\r\n    arr[pivotIdx] = arr[rightIdx];\r\n    arr[rightIdx] = pivotVal;\r\n\r\n    currIdx = leftIdx;\r\n\r\n    for (let i = leftIdx; i < rightIdx; i++) {\r\n        if (compareTracks(arr[i], pivotVal)) {\r\n\r\n            // swaps elements\r\n            [arr[i], arr[currIdx]] = [arr[currIdx], arr[i]];\r\n            currIdx++;\r\n        }\r\n    }\r\n\r\n    newPivotIdx = currIdx;\r\n    arr[rightIdx] = arr[newPivotIdx];\r\n    arr[newPivotIdx] = pivotVal;\r\n    // alternate way of swapping by destructuring\r\n    // [arr[pivotIndex], arr[end]] = [arr[end], arr[pivotIndex]]\r\n\r\n    return newPivotIdx;\r\n}\r\n\r\nconst quickSortRecursive = (arr, leftIdx, rightIdx,) => {\r\n    if (rightIdx > leftIdx) {\r\n        let pivotIdx, newPivotIdx;\r\n        pivotIdx = Math.floor((leftIdx + rightIdx) / 2);\r\n        newPivotIdx = partition(arr, leftIdx, rightIdx, pivotIdx);\r\n\r\n        quickSortRecursive(arr, leftIdx, newPivotIdx - 1);\r\n        quickSortRecursive(arr, newPivotIdx + 1, rightIdx);\r\n    }\r\n}\r\n\r\nexport const quickSort = arr => {\r\n    quickSortRecursive(arr, 0, arr.length - 1);\r\n}\r\n\r\nexport const compareTracks = (a, b) => {\r\n    let dateA, dateB;\r\n    dateA = Date.parse(a.track.album.release_date);\r\n    dateB = Date.parse(b.track.album.release_date);\r\n\r\n    return dateA < dateB;\r\n}\r\n\r\nexport const compare = (a, b) => {\r\n    let dateA, dateB;\r\n    let result = 0;\r\n    dateA = Date.parse(a.track.album.release_date);\r\n    dateB = Date.parse(b.track.album.release_date);\r\n\r\n\r\n    if (dateA < dateB)\r\n        result = -1;\r\n    else if (dateA > dateB)\r\n        result = 1\r\n\r\n    return result;\r\n}\r\n\r\n\r\n// TODO: can probably just have one compare function, and just pass in the relevant properties\r\nexport const compareAlbumSongs = (a, b) => {\r\n    const posA = a.track.track_number;\r\n    const posB = b.track.track_number;\r\n    let result = 0;\r\n\r\n    if (posA < posB)\r\n        result = -1;\r\n    else if (posA > posB)\r\n        result = 1;\r\n\r\n    return result;\r\n}\r\n\r\nexport const compareAlbumDates = (a, b) => {\r\n    let dateA, dateB;\r\n    let result = 0;\r\n    dateA = Date.parse(a[0].track.album.release_date);\r\n    dateB = Date.parse(b[0].track.album.release_date);\r\n\r\n    // swapped result value assignment to reverse sorting\r\n    if (dateA < dateB)\r\n        result = 1;\r\n    else if (dateA > dateB)\r\n        result = -1;\r\n\r\n    return result;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from \"axios\";\r\n\r\nimport Song from './Song';\r\nimport SortButton from './SortButton';\r\nimport SaveButton from './SaveButton';\r\n\r\nimport { compareAlbumDates, compareAlbumSongs } from '../utils/sort';\r\n\r\n\r\nfunction Playlist({ playlist, access_token, onExit }) {\r\n    const [sorted, setSorted] = useState(false);\r\n    const [songs, setSongs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getPlaylistSongs() {\r\n            const response = await axios.get(playlist.tracks.href, {\r\n                headers: {\r\n                    Authorization: `Bearer ${ access_token }`\r\n                }\r\n            });\r\n\r\n            let songs = response.data.items;\r\n\r\n            while (songs.length < response.data.total) {\r\n                const res = await axios.get(playlist.tracks.href, {\r\n                    params: {\r\n                        offset: songs.length,\r\n                        limit: 100\r\n                    },\r\n                    headers: {\r\n                        Authorization: `Bearer ${ access_token }`\r\n                    }\r\n                }).then(res => res.data.items)\r\n\r\n                songs = [...songs, ...res];\r\n            }\r\n\r\n            setSongs(songs);\r\n        }\r\n        setSorted(false);\r\n        getPlaylistSongs();\r\n    }, [playlist, access_token]);\r\n\r\n    const listItems = songs.map((song, index) => (\r\n        <Song song={song} key={song.track.id} />\r\n    ));\r\n\r\n    const onSort = () => {\r\n        let sortedAlbums = [];\r\n\r\n        // group songs by album using album name as key\r\n        const groupedAlbums = songs.reduce((r, a) => {\r\n            // interpolating property value to set key name on new object\r\n            r[a.track.album.name] = [...r[a.track.album.name] || [], a]; // spread current album array and add current song \r\n            return r;\r\n        }, {}); // {} is passsed as an initial value for reducer\r\n\r\n        // iterate through grouped albums object\r\n        for (const album in groupedAlbums) {\r\n            const sortedAlbum = [...groupedAlbums[album]].sort(compareAlbumSongs);\r\n            sortedAlbums = [...sortedAlbums, sortedAlbum];\r\n        }\r\n\r\n        sortedAlbums = [...sortedAlbums].sort(compareAlbumDates);\r\n\r\n        let sortedSongs = [];\r\n\r\n        for (const album of sortedAlbums) {\r\n            sortedSongs = [...sortedSongs, ...album];\r\n        }\r\n\r\n        setSongs(sortedSongs);\r\n        !sorted && setSorted(!sorted);\r\n    }\r\n\r\n    const onSave = async () => {\r\n        // TODO: for playlists.length > 100, first request should be PUT, then subsequent requests should POST\r\n\r\n        if (sorted) {\r\n            const uris = songs.map(song => song.track.uri);\r\n\r\n            await axios.put(`https://api.spotify.com/v1/playlists/${ playlist.id }/tracks`, {\r\n                uris: uris.slice(0, 100)\r\n            }, {\r\n                headers: {\r\n                    Authorization: `Bearer ${ access_token }`\r\n                }\r\n            })\r\n                .then(async () => {\r\n                    if (uris.length > 100) {\r\n                        let counter = 100;\r\n                        while (counter < uris.length) {\r\n                            await axios.post(`https://api.spotify.com/v1/playlists/${ playlist.id }/tracks`, {\r\n                                uris: uris.slice(counter, counter + 100)\r\n                            }, {\r\n                                headers: {\r\n                                    Authorization: `Bearer ${ access_token }`\r\n                                }\r\n                            });\r\n\r\n                            counter += 100;\r\n                        }\r\n                    }\r\n                })\r\n                .catch(function(error) {\r\n                    if (error.response) {\r\n                        console.log(error.response.data);\r\n                        console.log(error.response.status);\r\n                        console.log(error.response.headers);\r\n                    } else if (error.request) {\r\n                        console.log(error.request);\r\n                    } else {\r\n                        console.log('Error', error.message);\r\n                    }\r\n                    console.log(error.config);\r\n                });\r\n\r\n            setSorted(!sorted);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"playlist\">\r\n            <button className=\"playlist--button-exit\" onClick={() => onExit()}>\r\n                <svg role=\"img\" focusable=\"false\" height=\"24\" width=\"24\" viewBox=\"0 0 24 24\" className=\"button-back\">\r\n                    <polyline points=\"16 4 7 12 16 20\" fill=\"none\" stroke=\"#181818\"></polyline>\r\n                </svg>\r\n            </button>\r\n            <div className=\"playlist-header\">\r\n                <div className=\"playlist-image\">\r\n                    {/* spotify web player uses 300x300 image and resizes */}\r\n                    <img src={playlist.images[0].url} alt={playlist.name} />\r\n                </div>\r\n                <div className=\"metadata\">\r\n                    <h1 className=\"playlist-name\">{playlist.name}</h1>\r\n                    <span>{playlist.owner.display_name}</span>\r\n\r\n                    {/* TODO: Need to disable buttons until proper playlist songs load */}\r\n                    <div className=\"buttons\">\r\n                        <SortButton onClick={onSort} />\r\n                        <SaveButton onClick={onSave} sorted={sorted} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div>{listItems}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Playlist;","import React, { useEffect, useState } from 'react';\r\n\r\nconst useViewport = () => {\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n\r\n    useEffect(() => {\r\n        const handleWindowResize = () => setWidth(window.innerWidth);\r\n\r\n        window.addEventListener(\"resize\", handleWindowResize);\r\n\r\n        return () => window.removeEventListener(\"resize\", handleWindowResize);\r\n    }, []);\r\n\r\n    return { width };\r\n}\r\n\r\nexport default useViewport;","import React from \"react\";\r\n\r\nconst MobilePlaylistItem = ({ playlist, onPlaylistSelect, selectedPlaylist }) => {\r\n    return (\r\n        <div\r\n            className={`playlist-item ${ selectedPlaylist && selectedPlaylist.name === playlist.name ? \"active\" : \"\" }`}\r\n            onClick={() => onPlaylistSelect(playlist)}\r\n        >\r\n            <div className=\"list-image\">\r\n                <img src={playlist.images[2].url} alt={playlist.name} />\r\n            </div>\r\n            <div className=\"list-info\">{playlist.name}</div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default MobilePlaylistItem;","import React from 'react';\r\n\r\nfunction DesktopPlaylistItem({ playlist, onPlaylistSelect, selectedPlaylist }) {\r\n    return (\r\n        // <div className=\"playlist-item item\" onClick={() => onPlaylistSelect(playlist)}>\r\n        //     {playlist.name}\r\n        // </div>\r\n        <div\r\n            className={`playlist-item ${ selectedPlaylist && selectedPlaylist.name === playlist.name ? \"active\" : \"\" }`}\r\n            onClick={() => onPlaylistSelect(playlist)}\r\n        >\r\n            {playlist.name}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DesktopPlaylistItem;","import React from 'react';\r\nimport useViewport from '../hooks/useViewport';\r\nimport MobilePlaylistItem from './MobilePlaylistItem';\r\nimport DesktopPlaylistItem from './DesktopPlaylistItem';\r\n\r\nconst PlaylistItem = ({ playlist, onPlaylistSelect, selectedPlaylist }) => {\r\n    const { width } = useViewport();\r\n    const breakpoint = 768;\r\n\r\n\r\n\r\n    // TODO: need to pass in a component with playlist, onPlaylistSelect, and selected playlist\r\n    return (\r\n        width < breakpoint ?\r\n            <MobilePlaylistItem\r\n                playlist={playlist}\r\n                onPlaylistSelect={onPlaylistSelect}\r\n                selectedPlaylist={selectedPlaylist}\r\n            />\r\n            :\r\n            <DesktopPlaylistItem\r\n                playlist={playlist}\r\n                onPlaylistSelect={onPlaylistSelect}\r\n                selectedPlaylist={selectedPlaylist}\r\n            />\r\n    )\r\n\r\n}\r\n\r\nexport default PlaylistItem;","import React from 'react';\r\nimport PlaylistItem from './PlaylistItem';\r\n\r\nfunction Playlists({ playlists, onPlaylistSelect, selectedPlaylist }) {\r\n    const list = playlists.map(playlist => {\r\n        return (\r\n            <PlaylistItem\r\n                playlist={playlist}\r\n                onPlaylistSelect={onPlaylistSelect}\r\n                selectedPlaylist={selectedPlaylist}\r\n                key={playlist.id}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        // <div className=\"ui relaxed divided list\">{list}</div>\r\n        <div className={`playlists ${ selectedPlaylist ? \"disable-scroll\" : \"\" }`}>\r\n            <h1 className=\"playlists-header\">Your Playlists</h1>\r\n            {list}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Playlists;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport '../index.css';\r\n\r\nimport Playlist from './Playlist';\r\nimport Playlists from './Playlists';\r\n\r\nconst Dashboard = ({ access_token }) => {\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [showPlaylist, setShowPlaylist] = useState(false);\r\n    const [selectedPlaylist, setSelectedPlaylist] = useState(null);\r\n    // TODO: have playlist slide in only after loaded\r\n    // const [playlistLoaded, setPlaylistLoaded] = useState(false); \r\n\r\n    useEffect(() => {\r\n        async function getUserPlaylists() {\r\n            const response = await axios.get(\"https://api.spotify.com/v1/me/playlists\", {\r\n                headers: {\r\n                    Authorization: `Bearer ${ access_token }`\r\n                }\r\n            }).then(res => res.data.items);\r\n            setPlaylists(response);\r\n        }\r\n\r\n        getUserPlaylists();\r\n    }, [access_token]);\r\n\r\n    const onPlaylistSelect = playlist => {\r\n        setShowPlaylist(true);\r\n        setSelectedPlaylist(playlist);\r\n    }\r\n\r\n    // In mobile layout, when exit/back sets selected playlist to null\r\n    const onExit = () => {\r\n        setShowPlaylist(false);\r\n        setTimeout(() => setSelectedPlaylist(null), 400);\r\n    }\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <Playlists playlists={playlists} onPlaylistSelect={onPlaylistSelect} selectedPlaylist={selectedPlaylist} />\r\n\r\n            {/* apply animation styling to this div */}\r\n            <div className={`playlist-container ${ showPlaylist ? \"playlist-slidein\" : \"\" }`}>\r\n                {selectedPlaylist ?\r\n                    <Playlist\r\n                        playlist={selectedPlaylist}\r\n                        access_token={access_token}\r\n                        onExit={onExit} />\r\n                    :\r\n                    null\r\n                }\r\n            </div>\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\n\r\nfunction Login() {\r\n    return (\r\n        <div className=\"login-container\">\r\n            <h1 className=\"login-header\">Sortify</h1>\r\n            <a className=\"spotify spotify-btn spotify-btn-login\" href=\"https://spotify-sorting-app.herokuapp.com/login\">\r\n                Login with Spotify\r\n            </a>\r\n            {/* <a className=\"spotify spotify-btn spotify-btn-login\" href=\"http://localhost:3001/login\">\r\n                Login with Spotify\r\n            </a> */}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport Dashboard from './Dashboard';\r\nimport Login from './Login';\r\n\r\nconst access_token = new URLSearchParams(window.location.search).get(\"access_token\");\r\n\r\nfunction App() {\r\n  return access_token ? <Dashboard access_token={access_token} /> : <Login />\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}